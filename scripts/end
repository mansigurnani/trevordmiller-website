#!/bin/sh
set -euo pipefail

# -----------------------------------------------------------------
# Environment (Unix)
# -----------------------------------------------------------------

echo "Removing system package manager artifacts"
brew cleanup

# -----------------------------------------------------------------
# Editor (Vim)
# -----------------------------------------------------------------

# Vim cleans up automatically when the terminal is closed

# -----------------------------------------------------------------
# Version control (Git)
# -----------------------------------------------------------------

echo "Removing merged local branches in each git repo"
deep_git_prune() {
	IFS=$'\n\t'

	set +e
	LOCAL_BRANCHES=$(git branch --merged master | grep -v -e 'master' -e '\*' | tr -d ' ')
	set -e

	if [[ -n "$LOCAL_BRANCHES" ]]; then
		for BRANCH in $LOCAL_BRANCHES; do
			git branch -d "$BRANCH"
		done
	fi
}
cd ~/repos
for i in */.git; do (
	cd $i/..
	deep_git_prune
); done

echo "Checking the status of each git repo"
deep_git_status() {
	cd ~/repos
	find . -path "*/.git" -maxdepth 2 -print -execdir git status ";"
}
deep_git_status_output=$(
	deep_git_status | grep \
		-e "Untracked files:" \
		-e "Changes not staged for commit:" \
		-e "Changes to be committed:" \
		-e "Your branch is ahead"
)
if [ ! -z "$deep_git_status_output" ]; then
	echo "Dirty git repos were found! Fix them and re-run."
	deep_git_status
	exit 1
fi

# -----------------------------------------------------------------
# Language (Rust)
# -----------------------------------------------------------------

# Rust cleans up automatically when programs end

# -----------------------------------------------------------------
# Language (JavaScript)
# -----------------------------------------------------------------

echo "Quitting language processes"
killall node || true

# -----------------------------------------------------------------
# Operating system (macOS)
# -----------------------------------------------------------------

echo "Closing apps"

foreground_apps_string=$(osascript -e 'tell application "System Events" to get name of (processes where background only is false)')

IFS=',' read -r -a foreground_apps <<<"$foreground_apps_string"

for foreground_app in "${foreground_apps[@]}"; do
	app_name=$(echo "$foreground_app" | sed 's/^ *//g')
	if [[ ! "$app_name" == "Finder" && ! "$app_name" == "Terminal" ]]; then
		osascript -e 'quit app "'"$app_name"'"'
	fi
done

echo "Removing operating system artifacts"
find ~/repos -name '.DS_Store' -delete

echo "Removing downloads"
rm -rf ~/Downloads/*
